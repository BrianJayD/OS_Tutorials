1.When a process creates a copy of itself. Where a parent process creates a
  child process and waits till the child process has finished to join. This
  differs from multithreads because multithreads can run at the same time while
  forked parent processes are required to wait for the child processes to change
  before completing.

2.Inter-process comminication allows system processes to communicate and share
  data between each other. Using mutex locks, signals and barriers are some
  of the methods for IPC.

3.Semiphores are abstract data that controls access to a resource by all processes.
  Mutexes are when threads that are in a controlled section and accessing a
  resource that is to be used in other threads. When a thread is in a controlled
  section, all other threads must wait for the thread to finish its controlled
  section in order to access the resource.

4.wait() - If there is at least one child process, the caller will be blocked until
  the child processes exit, then the caller will resume.

  signal() - If a signal is caught, the program will report any exceptional events
  that happen to a process.

5.sem_open() - Creates a connection between semaphore and process.
  sem_close() - Indicates that the process is finished using the semaphore, as well
  as deallocates the resources used by the system for the semaphore being used.
  sem_destroy() - Gets rid of unnamed semaphores.
  sem_init() - Initializes unnamed semaphore.
  sem_wait() - Locks semaphore.
  sem_post() - Unlocks semaphore.
